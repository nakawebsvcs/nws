---
import navData from "../data/navData.json";
---

<!-- ============================================ -->
<!--                 Navigation                   -->
<!-- ============================================ -->

<header id="cs-navigation">
    <div class="cs-container">
        <!--Nav Logo-->
        <a href="/" class="cs-li-link nws" aria-label="back to home">
            Nakamura Web Services
        </a>
        <!--Navigation List-->
        <nav class="cs-nav" role="navigation">
            <!--Mobile Nav Toggle-->
            <button class="cs-toggle" aria-label="mobile menu toggle">
                <div class="cs-box" aria-hidden="true">
                    <span class="cs-line cs-line1" aria-hidden="true"></span>
                    <span class="cs-line cs-line2" aria-hidden="true"></span>
                    <span class="cs-line cs-line3" aria-hidden="true"></span>
                </div>
            </button>
            <!-- We need a wrapper div so we can set a fixed height on the cs-ul in case the nav list gets too long from too many dropdowns being opened and needs to have an overflow scroll. This wrapper acts as the background so it can go the full height of the screen and not cut off any overflowing nav items while the cs-ul stops short of the bottom of the screen, which keeps all nav items in view no matter how mnay there are-->
             <div class="cs-ul-wrapper">
                <ul id="cs-expanded" class="cs-ul" aria-expanded="false">
                    <li class="cs-li">
                        <a href="/#sbsr-1011" class="cs-li-link" data-section="sbsr-1011">
                            About
                        </a>
                    </li>
                    <li class="cs-li">
                        <a href="/#services-281" class="cs-li-link" data-section="services-281">
                            Services
                        </a>
                    </li>
                    <li class="cs-li">
                        <a href="/#portfolio-1716" class="cs-li-link" data-section="portfolio-1716">
                            My Work
                        </a>
                    </li>
                    <li class="cs-li">
                        <a href="/#reviews" class="cs-li-link" data-section="reviews">
                            Reviews
                        </a>
                    </li>
                     <li class="cs-li">
                        <a href="/#faq-351" class="cs-li-link" data-section="faq-351">
                            FAQ
                        </a>
                    </li>
                    <li class="cs-li">
                        <a href="/contact" class="cs-li-link" data-section="contact-281">
                            Contact
                        </a>
                    </li>
                </ul>
            </div>
        </nav>
    </div>
</header>

<script>
   // Function to handle active link state based on hash or scroll position
function updateActiveNavLink() {
    // Get all navigation links
    const navLinks = document.querySelectorAll('.cs-li-link:not(.nws)');
    
    // Get current hash without the # symbol
    const currentHash = window.location.hash.substring(1);
    
    // Clear all active states first
    navLinks.forEach(link => {
        link.classList.remove('cs-active');
    });
    
    // If there's a hash, set active based on hash
    if (currentHash) {
        navLinks.forEach(link => {
            const section = link.getAttribute('data-section');
            if (currentHash === section) {
                link.classList.add('cs-active');
            }
        });
        
        // After a short delay, switch back to scroll-based highlighting
        setTimeout(() => {
            // Remove the hash without causing a page jump
            if (history.pushState) {
                history.pushState(null, null, window.location.pathname);
            } else {
                window.location.hash = '';
            }
        }, 1500); // Delay to keep the highlight visible for a moment
    } 
    
    // Check scroll position regardless of hash presence
    // Get all sections by their IDs
    const sections = [];
    
    // Collect all sections referenced in the navigation
    navLinks.forEach(link => {
        const sectionId = link.getAttribute('data-section');
        if (sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                sections.push(section);
            }
        }
    });
    
    // If we have sections to check
    if (sections.length > 0 && !currentHash) {  // Only do scroll-based highlighting if no hash
        // Find which section is most visible in the viewport
        let currentSection = null;
        let maxVisibleHeight = 0;
        
        sections.forEach(section => {
            const rect = section.getBoundingClientRect();
            // Calculate how much of the section is visible in the viewport
            const visibleHeight = Math.min(rect.bottom, window.innerHeight) - Math.max(rect.top, 0);
            
            // If this section has more visible area than previous ones
            if (visibleHeight > maxVisibleHeight && visibleHeight > 0) {
                maxVisibleHeight = visibleHeight;
                currentSection = section.id;
            }
        });
        
        // Update active link based on current section
        if (currentSection) {
            navLinks.forEach(link => {
                if (link.getAttribute('data-section') === currentSection) {
                    link.classList.add('cs-active');
                }
            });
        }
    }
}

// Update active link on page load
document.addEventListener('DOMContentLoaded', updateActiveNavLink);

// Update active link on hash change
window.addEventListener('hashchange', updateActiveNavLink);

// Update active link on scroll with throttling
let scrollTimeout;
window.addEventListener('scroll', function() {
    if (!scrollTimeout) {
        scrollTimeout = setTimeout(function() {
            updateActiveNavLink();
            scrollTimeout = null;
        }, 100); // Throttle to run at most every 100ms
    }
});

// If using Astro View Transitions, also update on page load
document.addEventListener('astro:page-load', updateActiveNavLink);
</script>

                                

<style lang="less">
/*-- -------------------------- -->
<---     Mobile Navigation      -->
<--- -------------------------- -*/

body,
html {
    /* reset margin and padding so there's no gap between the nav and the screen edges */
    margin: 0;
    padding: 0;
}

/* Mobile - 1023px */
@media only screen and (max-width: 63.9375rem) {
    body {
        &.cs-open {
            overflow: hidden;
        }

        &.scroll {
            #cs-navigation {
                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                &:before {
                    height: 100%;
                }
            }
        }

    }

    #cs-navigation {
        width: 100%;
        padding: (12/16rem) (16/16rem);
        /* prevents padding and border from affecting height and width 
        box-sizing: border-box;
        background: rgba(26, 26, 26, 0.08);
        -webkit-backdrop-filter: blur(27px);
        backdrop-filter: blur(27px); */
        position: fixed;
        z-index: 10000;
        transition: background-color 0.3s;

        &:before {
            /* white overlay on scroll */
            content: "";
            width: 100%;
            height: 0%;
            background: #ffffff;
            opacity: 1;
            position: absolute;
            display: block;
            top: 0;
            left: 0;
            transition: height 0.3s;
        }

        &:after {
            /* side overlay when menu opens */
            content: "";
            width: 0%;
            height: 100vh;
            background: rgba(0, 0, 0, 0.6);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            position: absolute;
            display: block;
            top: 0%;
            right: 0;
            z-index: -1100;
            opacity: 0;
            transition:
                width 0.5s,
                opacity 0.5s;
        }

        &.cs-active {
            background-color: #1a1a1a;
            &:before {
                height: 100%;
                opacity: 1;
            }

            &:after {
                width: 100%;
                opacity: 1;
            }

            .cs-ul-wrapper {
                opacity: 1;
                transform: scaleX(1);
                transition-delay: 0.2s;
            }

            .cs-li {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .cs-container {
            width: 100%;
            display: flex;
            justify-content: flex-end;
            align-items: center;
        }

        .cs-li-link.nws {
        margin-right: auto;
        text-align: left;
    }

        .cs-toggle {
            width: (56/16rem);
            height: (56/16rem);
            margin: 0 0 0 auto;
            background-color: var(--primary);
            border: none;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            z-index: 10;
            transition: transform 0.6s;
            &.cs-active {
                transform: rotate(180deg);
            }
        }

        .cs-active {
            .cs-line1 {
                top: 50%;
                transform: translate(-50%, -50%) rotate(225deg);
            }

            .cs-line2 {
                top: 50%;
                transform-origin: center;
                transform: translate(-50%, -50%) translateY(0) rotate(-225deg);
            }

            .cs-line3 {
                bottom: 100%;
                opacity: 0;
            }
        }

        .cs-box {
            /* 24px - 28px */
            width: clamp(1.5rem, 2vw, 1.75rem);
            height: (16/16rem);
            position: relative;
        }

        .cs-line {
            width: 100%;
            height: 2px;
            border-radius: 2px;
            background-color: #fafbfc;
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }

        .cs-line1 {
            top: 0;
            transform-origin: center;
            transition:
                transform 0.5s,
                top 0.3s,
                left 0.3s;
            animation-duration: 0.7s;
            animation-timing-function: ease;
            animation-fill-mode: forwards;
            animation-direction: normal;
        }

        .cs-line2 {
            top: 50%;
            transform: translateX(-50%) translateY(-50%);
            transition:
                top 0.3s,
                left 0.3s,
                transform 0.5s;
            animation-duration: 0.7s;
            animation-timing-function: ease;
            animation-fill-mode: forwards;
            animation-direction: normal;
        }

        .cs-line3 {
            bottom: 0;
            transition:
                bottom 0.3s,
                opacity 0.3s;
        }

        .cs-ul-wrapper {
            min-width: 60vw;
            height: 100vh;
            opacity: 0;
            background-color: #fff;
            box-shadow: inset rgba(0, 0, 0, 0.2) 0px 8px 24px;
            overflow: hidden;
            position: absolute;
            top: 100%;
            left: auto;
            right: 0;
            z-index: -1;
            transform: scaleX(0);
            transform-origin: top right;
            transition:
                transform 0.4s,
                opacity 0.3s;
        }

        .cs-ul {
            margin: 0;
            /* 28px - 40px */
            padding: (48/16rem) clamp(1.75rem, 3vw, 2.5rem) (32/16rem)
                (70/16rem);
            width: auto;
            min-width: 40%;
            height: 65vh;
            overflow: scroll;
            display: flex;
            justify-content: flex-start;
            flex-direction: column;
            align-items: flex-end;
            gap: (20/16rem);
        }

        .cs-li {
            text-align: right;
            list-style: none;
            width: 100%;
            margin-right: 0;
            /* transition from these values */
            transform: translateX(-2.5rem);
            opacity: 0;
            transition:
                transform 0.6s,
                opacity 0.9s;

            &:nth-of-type(1) {
                transition-delay: 0.05s;
            }
            &:nth-of-type(2) {
                transition-delay: 0.1s;
            }
            &:nth-of-type(3) {
                transition-delay: 0.15s;
            }
            &:nth-of-type(4) {
                transition-delay: 0.2s;
            }
            &:nth-of-type(5) {
                transition-delay: 0.25s;
            }
            &:nth-of-type(6) {
                transition-delay: 0.3s;
            }
            &:nth-of-type(7) {
                transition-delay: 0.35s;
            }
            &:nth-of-type(8) {
                transition-delay: 0.4s;
            }
            &:nth-of-type(9) {
                transition-delay: 0.45s;
            }
        }

        .cs-li-link {
            font-family: 'Merriweather Sans', sans-serif;
            /* 16px - 24px */
            font-size: clamp(1rem, 2.5vw, 1.5rem);
            line-height: 1.2em;
            text-decoration: none;
            font-weight: bold;
            margin: 0;
            color: #086173;
            display: inline-block;
            position: relative;transition: color 0.3s ease; /* Add transition for smooth color change */

            &:not(.nws):hover {
                color: var(--accentColor); /* Change color on hover */
            }

            &:before {
                /* active state underline */
                content: "";
                width: 100%;
                height: 1px;
                background: currentColor;
                opacity: 1;
                position: absolute;
                display: none;
                bottom: (-2/16rem);
                left: 0;
            }

            &:not(.nws).cs-active {
                color: var(--accentColor); /* Change color for active links */
                &:before {
                    display: block;
                }
            }
        }

        .cs-button-solid {
            display: none;
        }
    }
}

/*-- -------------------------- -->
<---     Desktop Navigation     -->
<--- -------------------------- -*/

/* Small Desktop - 1024px */
@media only screen and (min-width: 64rem) {
    body.scroll {
        /* when the scroll class is on the body, run these styles */
        #cs-navigation {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            &:before {
                height: 100%;
            }
        }
    }

    #cs-navigation {
        width: 100%;
        padding: 0 (16/16rem);
        /* prevents padding and border from affecting height and width 
        box-sizing: border-box;
        background: rgba(26, 26, 26, 0.08);
        -webkit-backdrop-filter: blur(27px);
        backdrop-filter: blur(27px); */
        position: fixed;
        z-index: 10000;

        &:before {
            /* on scroll background */
            content: "";
            width: 100%;
            height: 0%;
            background: #fff;
            opacity: 1;
            position: absolute;
            display: block;
            top: 0;
            left: 0;
            transition: height 0.3s;
        }

        .cs-container {
            width: 100%;
            /* same height as the cs-ul-wrapper */
            height: (70/16rem);
            max-width: (1280/16rem);
            margin: auto;
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: (24/16rem);
            position: relative;
        }

        .cs-toggle {
            display: none;
        }

          .cs-li-link.nws {
        margin-right: auto;
        padding-left: 0;
        order: -1;
        font-size: 1.3rem;
    }

        .cs-ul-wrapper {
            /* absolutely positioned to be dead center */
            position: absolute;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
        }

        .cs-ul {
            width: 100%;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: flex-start;
            align-items: center;
            gap: (24/16rem);
        }

        .cs-li {
            list-style: none;
            padding: (40/16rem) 0;
            /* prevent flexbox from squishing it */
            flex: none;
        }

        .cs-li-link {
            font-family: 'Merriweather Sans', sans-serif;
            /* 14px - 16px */
            font-size: clamp(0.975rem, 0.8vw, 1rem);
            line-height: 1.5em;
            font-weight: 700;
            text-decoration: none;
            margin: 0;
            padding: 0 (16/16rem);
            color: #086173;
            display: block;
            position: relative;
            z-index: 1;
            transition: color 0.3s;

            &:not(.nws):hover {
                color: var(--accentColor); /* Change color on hover */
                &:before {
                    opacity: 1;
                    transform: translate(-50%, -50%) scale(1);
                }
            }

            &:before {
                /* on scroll highlight */
                content: "";
                width: 100%;
                height: (40/16rem);
                opacity: 0;
                color: #086173;
                position: absolute;
                display: block;
                top: 50%;
                left: 50%;
                z-index: -1;
                transform: translate(-50%, -50%) scale(1.2);
                transition:
                    opacity 0.3s,
                    transform 0.3s;
            }

            &:not(.nws).cs-active {
                color: #F4623A; /* Change color for active links */
                &:before {
                    opacity: 1;
                    transform: translate(-50%, -50%) scale(1);
                }
            }
        }
    }
}

</style>
