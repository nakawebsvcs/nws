---
import BaseLayout from "../layouts/BaseLayout.astro";
import client from "../data/client.json";
import Landing from "../components/Landing.astro";

// Optimize our landing image and pass it as props to the BaseLayout (for preloading) and Landing (for rendering)
import {getOptimizedImage} from "../js/utils"
import landingImage from "../assets/images/landing-1.png" // <-- THE PATH TO THE ASSET YOU WANT TO PRELOAD - The asset must live in src
const optimizedImage = await getOptimizedImage(landingImage)
---

<BaseLayout
  title="About"
  description="Meta description for the page"
  preloadedImage = {optimizedImage}
>
  <!-- ============================================ -->
  <!--                    LANDING                   -->
  <!-- ============================================ -->

  <Landing 
    title="contact me"
    image={optimizedImage}
  />

  <!-- ============================================ -->
  <!--                Contact Form                  -->
  <!-- ============================================ -->

  <section id="cs-contact">
    <div class="cs-container">
       <form id="cs-form" name="contact" method="post" data-netlify="true" netlify-honeypot="website" action="/contact/?success=true">
  <p class="hidden">
    <label>Don't fill this out if you're human: <input name="website" /></label>
  </p>
        <div class="cs-content">
          <span class="cs-topper">Contact</span>
          <h2 class="cs-title">Get in Touch</h2>
          <p class="cs-text">
            Let me know how I can support you via the form below and I'll respond as soon as possible. Mahalo nui!
          </p>
        </div>
        <label>
          Name
          <input
            required
            type="text"
            id="name"
            name="name"
            placeholder="Name"
          />
          </label>
           <label>
          Company/Organization
          <input
            type="text"
            id="organization"
            name="organization"
            placeholder="Company/Organization"
          />
        
        </label>
        <label>
          Email
          <input
            required
            type="email"
            id="email"
            name="email"
            placeholder="Email"
          />
        </label>
        <label>
          Phone
          <input
            type="tel"
            id="phone"
            name="phone"
            placeholder="Phone"
          />
        </label>
        <label class="cs-label-message">
          Message
          <textarea
            required
            name="message"
            id="message"
            placeholder="Write message..."></textarea>
        </label>
        <div data-netlify-recaptcha="true"></div>
<button class="cs-button-solid" type="submit">Submit Message</button>
      </form>
      <div class="cs-right-section">
        <!--Email-->
        <span class="cs-header">Email</span>
        <a class="cs-link" href={`mailto:${client.email}`}>{client.email}</a>
        <!--Phone
        <span class="cs-header">Phone</span>
        <a class="cs-link" href={`tel:${client.phoneForTel}`}
          >{client.phoneFormatted}</a
        > -->
        <!--Address-->
        <span class="cs-header">Location</span>
        <a class="cs-link" href={client.address.mapLink}>
          <!-- {client.address.lineOne},
          <br />
          {client.address.lineTwo},
          <br /> -->
          <span class="cs-block">
            {client.address.city}
            {client.address.state}
            {client.address.zip}
          </span>
        </a>

        <!-- Background Image-->
        <picture class="cs-bg-picture">
          <source
            media="(min-width: 601px)"
            srcset="/assets/images/Brand-Color-Logo.png"
          />
          <img
            aria-hidden="true"
            decoding="async"
            src="/assets/images/Brand-Color-Logo.png"
            alt="building"
            loading="lazy"
            width="2500"
            height="1667"
          />
        </picture>
      </div>
    </div>
  </section>

  <!-- Add this before the closing </BaseLayout> tag -->
<div id="thank-you-lightbox" class="lightbox">
  <div class="lightbox-content">
    <span class="close-lightbox">&times;</span>
    <h2>Thank You!</h2>
    <p>Your message has been received and I'll respond as soon as possible. Mahalo nui!</p>
    <button class="cs-button-solid close-button">Close</button>
  </div>
</div>

<script client:load>
  // Check for success parameter and show lightbox if present
  document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const success = urlParams.get('success');
    const lightbox = document.getElementById('thank-you-lightbox');
    const closeLightbox = document.querySelectorAll('.close-lightbox, .close-button');
    
    // Show lightbox if success parameter is true
    if (success === 'true' && lightbox) {
      lightbox.classList.add('active');
      
      // Update URL without the success parameter (to prevent showing the lightbox on refresh)
      history.replaceState({}, document.title, window.location.pathname);
    }
    
    // Close lightbox when clicking close button
    if (closeLightbox) {
      closeLightbox.forEach(element => {
        element.addEventListener('click', function() {
          lightbox.classList.remove('active');
        });
      });
    }
    
    // Close lightbox when clicking outside the content
    if (lightbox) {
      lightbox.addEventListener('click', function(e) {
        if (e.target === lightbox) {
          lightbox.classList.remove('active');
        }
      });
    }
    
    // Close lightbox with Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && lightbox && lightbox.classList.contains('active')) {
        lightbox.classList.remove('active');
      }
    });
  });
</script>

</BaseLayout>

<style lang="less">
  /* PAGE-SPECIFIC STYLES FOR THE CONTACT PAGE */

  /*-- -------------------------- -->
<---          Contact           -->
<--- -------------------------- -*/

.hidden {
  position: absolute;
  left: -10000px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

  /* Mobile - 360px */
  @media only screen and (min-width: 0em) {
    :root {
      /* 13px - 16px */
      --topperFontSize: clamp(0.8125rem, 1.6vw, 1rem);
      /* 31px - 49px */
      --headerFontSize: clamp(1.9375rem, 4.5vw, 3.0625rem);
      --bodyFontSize: 1rem;

      /* 60px - 100px top and bottom */
      --sectionPadding: clamp(3.75em, 7.82vw, 6.25em) 1rem;
    }

    #cs-contact {
      font-family: "Roboto", "Arial", sans-serif;
      padding: var(--sectionPadding);

      .cs-container {
        width: 100%;
        /* changes to 1280px at desktop */
        max-width: (800/16rem);
        margin: auto;
      }

      .cs-content {
        width: 100%;
      }

      .cs-topper {
        text-align: left;
        /* 8px - 12px */
        margin-bottom: clamp(0.5rem, 1.4vw, 0.75rem);
      }

      .cs-title {
        color: var(--primary);
        text-align: left;
        max-width: (800/16rem);
      }

      .cs-text {
        text-align: left;
        /* 404px - 522px */
        max-width: clamp(25.25rem, 30vw, 32.625rem);
        margin: 0 auto 0 0;
        /* 40px - 48px */
        margin-bottom: clamp(2.5rem, 6.3vw, 3rem);
      }

      #cs-form {
        margin-bottom: (40/16rem);
        label {
          font-size: (16/16rem);
          font-weight: 700;
          line-height: 1.5em;
          /* 12px - 20px */
          margin-bottom: clamp(0.75rem, 1.3em, 1.25rem);
          color: var(--headerColor);
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: flex-start;
        }

        .cs-label-message {
          /* 32px - 48px */
          margin-bottom: clamp(2rem, 6.3vw, 3rem);
        }

        input,
        textarea {
          font-size: (16/16rem);
          width: 100%;
          height: (64/16rem);
          margin-top: (4/16rem);
          /* prevents border & padding from affecting height */
          box-sizing: border-box;
          padding-left: (20/16rem);
          border: 1px solid #b4b2c7;
          border-radius: (8/16rem);
          transition: border 0.3s;

          &:hover {
            border: 1px solid var(--primary);
          }
        }

        textarea {
          font-family: inherit;
          min-height: (120/16rem);
          padding-top: (20/16rem);
        }

        .cs-button-solid {
          width: 100%;
          border: none;
        }
      }

      .cs-right-section {
        height: (320/16rem);
        /* 24px - 40px top & bottom */
        /* 20px - 40px left & right */
        padding: clamp(1.5rem, 3vw, 2.5rem) clamp(1.25rem, 3vw, 2.5rem);
        border-radius: (8/16rem);
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        align-items: flex-start;
        position: relative;
        /* cuts off corners on img tag */
        overflow: hidden;
      }

      .cs-header {
        /* 16px - 20px */
        font-size: clamp(1rem, 3vw, 1.25rem);
        font-weight: 700;
        line-height: 1.2em;
        margin-bottom: (8/16rem);
        color: var(--bodyTextColorWhite);
        display: block;
      }

      .cs-link {
        /* 16px - 20px */
        font-size: clamp(1rem, 3vw, 1.25rem);
        line-height: 1.2em;
        text-decoration: none;
        margin-bottom: (20/16rem);
        color: var(--bodyTextColorWhite);
        display: block;
        position: relative;

        &:before {
          /* Animated underline */
          content: "";
          width: 0%;
          height: 2px;
          /* current color of the parent */
          background: currentColor;
          opacity: 1;
          display: block;
          position: absolute;
          bottom: (-2/16rem);
          left: 0;
          transition: width 0.3s;
        }

        &:hover {
          &:before {
            width: 100%;
          }
        }

        &:last-of-type {
          margin-bottom: 0;
        }
      }

      .cs-block {
        /* sends second address line to the bottom on its own line */
        display: block;
      }

      .cs-bg-picture {
        width: 100%;
        height: 100%;
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition: transform 0.6s;

        &:before {
          /* background color overlay */
          content: "";
          width: 100%;
          height: 100%;
          background: linear-gradient(
            180deg,
            rgba(0, 0, 0, 0) 0%,
            rgba(0, 0, 0, 0.8) 100%
          );
          display: block;
          position: absolute;
          top: 0;
          left: 0;
          z-index: 1;
        }

        img {
          width: 100%;
          height: 100%;
          /* Makes img tag act as a background image */
          object-fit: cover;
          position: absolute;
          top: 0;
          left: 0;
        }
      }
    }
  }

  /* Tablet - 700px */
  @media only screen and (min-width: 43.75em) {
    #cs-contact {
      #cs-form {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        flex-wrap: wrap;

        label {
          width: 48%;
        }

        .cs-label-message {
          width: 100%;
        }
      }
    }
  }

  /* Small Desktop - 1024px */
  @media only screen and (min-width: 64em) {
    #cs-contact {
      .cs-container {
        max-width: (1280/16rem);
        display: flex;
        justify-content: flex-end;
        align-items: flex-start;
        gap: (80/16rem);
      }

      #cs-form {
        max-width: (630/16rem);
        label {
          width: 100%;
        }
      }

      .cs-right-section {
        width: 40%;
        max-width: (542/16rem);
        /* changes to 578px at 1300px wide */
        height: (686/16rem);
        /* prevents flexbox from squishing it */
        flex: none;

        &:hover {
          .cs-bg-picture {
            transform: scale(1.1);
          }
        }
      }

      .cs-block {
        /* goes back to inline so it stays "in line" with the rest of the text */
        display: inline-block;
      }
    }
  }

  /* Small Desktop - 1300px */
  @media only screen and (min-width: 81.25em) {
    #cs-contact {
      #cs-form {
        column-gap: (0/16rem);
        label {
          width: 48%;
          max-width: (305/16rem);
        }

        .cs-label-message {
          max-width: 100%;
        }
      }

      .cs-right-section {
        height: (578/16rem);
      }
    }
  }

   /*-- -------------------------- -->
<---          Lightbox            -->
<--- -------------------------- -*/

.lightbox {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  z-index: 1000;
  justify-content: center;
  align-items: center;
  
  &.active {
    display: flex;
  }
  
  .lightbox-content {
    background-color: white;
    padding: clamp(2rem, 5vw, 3rem);
    border-radius: 8px;
    max-width: 500px;
    width: 90%;
    position: relative;
    text-align: center;
    
    h2 {
      color: var(--primary);
      margin-bottom: 1rem;
    }
    
    p {
      margin-bottom: 2rem;
    }
    
    .close-lightbox {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 24px;
      cursor: pointer;
      color: #666;
      
      &:hover {
        color: var(--primary);
      }
    }
    
    .close-button {
      display: inline-block;
    }
  }
}

</style>
